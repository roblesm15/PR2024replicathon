---
title: "Tutorial 0a: Introduction to R Basics"
format: revealjs
smaller: true
echo: true
editor: 
  markdown: 
    wrap: 72
---

# Introduction to R Basics
```{css, echo = FALSE}
code.sourceCode {
  font-size: 1.3em;
  /* or try font-size: xx-large; */
}
```

This tutorial will go over some basics about **programming in R**.

We hope that you'll get a feel for **what R can do** as well as learn **where you can learn more** to use it on your own (great resources are listed at the end).

# Setting Up

## Getting Started with R

-   R is a programming language **developed to analyze data**.

-   **Built-in tools** for common analysis tasks.

-   Countless additional tools, called **packages**, have been developed
    by the R community and can be downloaded.

-   Anyone can use the language to write their own code to perform **new
    tasks and analyses**.

-   R is widely-used, free, and open-source with great community
    support.

## Posit Cloud (or RStudio, if you have it)

If you haven't already installed R and RStudio on your computer, we recommend using Posit Cloud for today.

![](images/setup.jpg){fig-align="center"}

## Project Setup

![](images/setup2.jpg){fig-align="center"}

## The Console

Now you are ready to start working with data! On your computer, identify the **console, the large pane on the left**.

![](images/console-screen-shot.png){fig-align="center"}

## The Console

When you type a line of code into the consult and hit enter the command gets *executed*. For example, try using R as a calculator by typing:

```{r echo = TRUE}
2 + 3
```

. . .

We can also assign values to variables. Try the following:

```{r echo = TRUE}
x <- 2
y <- 3
x + y
```

## File Browser

The bottom right pane is the **file browser**. Instead of running code in the console, you can save code in a file to be able to revisit it in the future.

![](images/new_doc.png){fig-align="center"}

## R Scripts

![](images/script.png){fig-align="center"}

## Quarto Documents

![](images/quarto.png){fig-align="center"}

# Get Started Using R

## The R Environment

When you download R from CRAN you get what we call ***base*** **R**.

-   *functions* that are considered fundamental for data analysis.

-   *example datasets*, useful as examples when we are learning to use
    the available functions.

You can see all the available dataset by executing the function `data` like this:

```{r,eval=FALSE, echo=TRUE}
data()
```

## The R Environment

Functions are objects!

-   Two parenthesis `()` let R know that we want the function to be
    **executed**.

-   Without them, R **shows us the code** for the function.

Type the following and note the difference:

```{r,eval=FALSE, echo=TRUE}
data
```

## The R Environment

To see functions at work, we'll use the `co2` dataset to illustrate the function `plot`, one of the base functions.

```{r, echo=TRUE}
plot(co2)
```

This plot shows Mauna Loa Atmospheric CO2 Concentration over time.

## R Packages

-   R's base functionality is bare bones.

-   Data science applications are broad, the statistical toolbox is
    extensive, and most users need only a small fraction of all the
    available functionality.

-   Specific functionality is available *on demand*, just like apps for
    smartphones. R does this using *packages*, also called *libraries*.

## Using R Packages

Some packages are included with the base download. This includes, for example, the `survival` package for survival analysis in R. To bring that functionality to your current session we type:

```{r,eval=FALSE, echo = TRUE}
library(survival)
```

. . .

![](images/blank.png){.r-stretch}

Most packages are stored on one of three repositories:

-   CRAN with [over **14,000**
    packages](https://cran.r-project.org/web/packages/) - these are
    vetted.

-   [Bioconductor project](http://www.bioconductor.org) with [over
    *1,700*
    packages](https://bioconductor.org/packages/release/BiocViews.html#___Software)
    for biological data analysis in R - these are more vetted.

-   GitHub with new packages every day - these are unvetted.

## Installing R Packages

Packages on CRAN can be installed using the `install.packages` function. You can easily install CRAN packages from within R if you know the name of the packages. As an example, if you want to install the package `dplyr`, you would use:

```{r,eval=FALSE, echo = TRUE}
install.packages("dplyr")
```

This step **only needs to be carried out once** on your machine. We can then load the package into our R sessions using the `library` function:

```{r, warning=FALSE, echo = TRUE}
library(dplyr)
```

This step **will need to be carried out during every new R session** before using the package. If you ever try to load a package with the `library` command and get an error, it probably means you need to install it first. Note that there are reasons to reinstall packages that already exist in your library (e.g., to receive updated versions of packages).

## Getting Help

A key feature you need to know about R is that you can get help for a function using `help` or `?`, like this:

```{r,eval=FALSE, echo = TRUE}
?install.packages
help("install.packages")
```

These pages are quite detailed about what the function expects as input and what the function produces as output. They also include helpful examples of how to use the function at the end.

## Comments

The hash character represents comments, so text following these characters is not interpreted:

```{r, echo = TRUE}
## This is just a comment; nothing happens after execution.
```

When writing your own R scripts, it is strongly recommended that you write out comments (or include text if using an quarto document) that explain what each section of code is doing. This is very helpful both for collaborators, and for your future self who may have to review, run, or edit your code.

# General Programming Principles

## General Programming Principles

Although there are different styles and languages of programming, in essence a piece of code is just a very detailed set of instructions. Each language has its own set of rules and syntax. According to Wikipedia, syntax is

> "the set of rules that defines the combinations of symbols that are
> considered to be a correctly structured document or fragment in that
> language."

Here are some general tips and pitfalls to avoid that will be useful when writing R code

## General Programming Principles

**1. Case matters**: variable names, keywords, functions, and package names are all case-sensitive

```{r, error=TRUE}
x <- 2
X + 8
```

. . . 

**2. Avoid using spaces**: variable names cannot contain spaces

```{r, error=TRUE}
my variable <- 10
```

. . .

**3. Use comments liberally**: your future self and others will thank you

```{r}
# define scalar variables x and y
x <- 2
y <- 3

# add variables x and y
x + y
```

## General Programming Principles

**4. Pay attention to classes**: character strings, numerics, factors, matrices, lists, data.frames, etc., all behave differently in R

```{r, error=TRUE}
myNumber <- factor(10)
str(myNumber)
myNumber^2
as.numeric(myNumber)^2
as.character(myNumber)^2
as.numeric(as.character(myNumber))^2
```

## General Programming Principles

**5. Search the documentation for answers**: when something unexpected happens, try to find out why by reading the documentation

```{r}
mean(c(3, 4, 5, NA))
mean(c(3, 4, 5, NA), na.rm = TRUE)
```

. . .

**6. It's OK to make mistakes**: expert R programmers run into (and *learn* from) errors all the time

Don't panic about those error messages!

# Looking at Data

## Using R for Data Science

The process of reading in data and getting it in a format for analysis is often called data "wrangling". This step may seem simple to an outside observer, but often takes up a significant proportion of the time spent on a data analysis.

## Importing Data into R

- Comma-separated value (CSV) or tab-separated value (TSV) files
- "Serialized" R data (RDS) object
- Excel files 
    - Avoid Excel when possible, as there is often information in annotations (e.g. bold, italics, colors). Parsing these additional annotations is messy and imperfect.

## Importing CSV Files

Plain-text formats are often easiest for sharing, as commercial software is not required for viewing or working with the data. CSV files can be read into R with the help of the `read.csv` function. Similarly, data.frames can be written to CSV files using the `write.csv` function.

If your data is not a text file but not in CSV format, there are many other helpful functions that will read your data into R, such as `read.table`, `read.delim`, `download.file`. Check out their help pages to learn more.

## Importing RDS Files

Another common format for storing data in R is the `RDS` file format. Unlike plain-text files, `RDS` files are *binary* files and cannot be opened and inspected using standard text editors. Instead, `RDS` files must be read in to R using the `readRDS` function. An object in R can be saved as an `RDS` file using the appropriately named `saveRDS` function. While `RDS` files can only be read using R, they are almost always substantially smaller than the corresponding CSV or TSV file.

Throughout, we will be working with tables stored as `RDS` files.

## Paths and the Working Directory

If you are reading in a file stored on your computer (or on Posit Cloud), the first step is to find the file containing your data and know its *path*.

When you are working in R it is useful to know your *working directory*. This is the directory or folder in which R will save or look for files by default. You can see your working directory thought the console by typing:

```{r, eval=FALSE}
getwd()
```

You can also change your working directory using the function `setwd`. Or you can change it through the RStudio menus by clicking on "Session".

## Paths and the Working Directory

The functions that read and write files (there are several in R) assume you mean to look for files or write files in the working directory. Our recommended approach for beginners will have you reading and writing to the working directory. However, you can also type the [full path](http://www.computerhope.com/jargon/a/absopath.htm), which will work independently of the working directory.

As an example, let's read in one of the datasets we'll be analyzing today:

```{r readRaw}
rawFile <- file.path("..", "data", "rawPharmacoData.rds")
print(rawFile)
pharmacoData <- readRDS(rawFile)
```

## Paths and the Working Directory

Once we have read a dataset into an *object* (here we called it `pharmacoData`), we are ready to explore it. What exactly is in `pharmacoData`? To check a summary of its contents, the `str()` function is handy (which stands for 'structure').

```{r, eval = TRUE}
str(pharmacoData)
```

Here we see that this object is a `data.frame`. These are one of the most widely used data types in R. They are particularly useful for storing tables. We can also print out the top of the data frame using the `head()` function

```{r, eval = TRUE}
head(pharmacoData)
```

## Paths and the Working Directory

Another option is to open up a 'spreadsheet' tab in another RStudio window, which can be done with the `View` function:

```{r, eval = FALSE}
View(pharmacoData)
```

# Class Types

## Class Types

There are many different data types in R, but a list of the more common
ones include:

-   `data.frame`
-   `vector`
-   `matrix`
-   `list`
-   `factor`
-   `character`
-   `numeric`
-   `integer`
-   `double`

## Class Types

Each has its own properties and reading up on them will give you a better understanding of the underlying R infrastructure. See the respective help files for additional information. To see what type of *class* an object is one can use the `class` function.

```{r, eval = TRUE}
class(pharmacoData)
```

## Extracting Columns

To extract columns from the data.frame we use the `$` character like this (to avoid printing the entire column to the screen, we'll add the `head` function to just print the top):

```{r}
head(pharmacoData$drug)
```

This now gives us a vector. We can access elements of the vector using the `[]` symbols. Here is the 5000th element of the vector:

```{r}
pharmacoData$drug[5000]
```

## Vectors

Vectors are a sequence of data elements of the same type (class). Many of the operations used to analyze data are applied to vectors. In R, vectors can be numeric, characters or logical. 

Each column of a data frame is a vector. Here we can investigate the class of the `drug` column of the `pharmacoData` data frame. We can also check that it is a vector with the `is.vector` function.

```{r}
class(pharmacoData$drug)
is.vector(pharmacoData$drug)
```

## Vectors

The most basic way to crest a vector is with the function `c`.

```{r}
x <- c(1, 2, 3, 4, 5)
```

Two very common ways of generating vectors are using `:` or the `seq`
function.

```{r}
x <- 1:5
x <- seq(1, 5)
```

Vectors can have names.

```{r}
names(x) <- c('a','b','c','d','e')
x
```

## Functions

Up to now we have used prebuilt functions. However, many times we have to construct our own. We can do this in R using `function`.

```{r}
avg <- function(x) {
    return(sum(x) / length(x))
}

avg(1:5)
```

# Resources

## Resources

Material in this tutorial was adapted from Rafael Irizarry's *Introduction to Data Science* course.

If you want to learn more about R after this event, a great place to start is with the [swirl](http://swirlstats.com/) tutorial, which teaches you R programming interactively, at your own pace and in the R console. Once you have R installed, you can install `swirl` and run it the following way:

```{r, eval = FALSE}
install.packages("swirl")
library(swirl)
swirl()
```

There are also many open and free resources and reference guides for R.
Two examples are:

-   [Quick-R](http://www.statmethods.net/): a quick online reference for
    data input, basic statistics and plots
-   R reference card
    (PDF)\[https://cran.r-project.org/doc/contrib/Short-refcard.pdf\] by
    Tom Short

## Some Useful Books on S/R

Standard texts

-   Chambers (2008). *Software for Data Analysis*, Springer. (your
    textbook)

-   Chambers (1998). *Programming with Data*, Springer.

-   Venables & Ripley (2002). *Modern Applied Statistics with S*,
    Springer.

-   Venables & Ripley (2000). *S Programming*, Springer.

-   Pinheiro & Bates (2000). *Mixed-Effects Models in S and S-PLUS*,
    Springer.

-   Murrell (2005). *R Graphics*, Chapman & Hall/CRC Press.

Other resources

-   Springer has a series of books called *Use R!*.

-   A longer list of books is at
    http://www.r-project.org/doc/bib/R-books.html
